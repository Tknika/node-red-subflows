[
    {
        "id": "68d2b36c.055ccc",
        "type": "subflow",
        "name": "opcua-handler",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 280,
                "y": 640,
                "wires": [
                    {
                        "id": "4f9107d.87dcef8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1100,
                "y": 460,
                "wires": [
                    {
                        "id": "f39dd80b.4d8df8",
                        "port": 0
                    },
                    {
                        "id": "4c2edad.59d1824",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "SERVER_HOST",
                "type": "str",
                "value": "localhost",
                "ui": {
                    "icon": "font-awesome/fa-address-card-o",
                    "label": {
                        "en-US": "Server Host"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "SERVER_PORT",
                "type": "num",
                "value": "4840",
                "ui": {
                    "icon": "font-awesome/fa-hashtag",
                    "label": {
                        "en-US": "Server Port"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "SEC_POLICY",
                "type": "str",
                "value": "None",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Security Policy"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "None"
                                },
                                "v": "None"
                            },
                            {
                                "l": {
                                    "en-US": "Basic128"
                                },
                                "v": "Basic128"
                            },
                            {
                                "l": {
                                    "en-US": "Basic128Rsa15"
                                },
                                "v": "Basic128Rsa15"
                            },
                            {
                                "l": {
                                    "en-US": "Basic192"
                                },
                                "v": "Basic192"
                            },
                            {
                                "l": {
                                    "en-US": "Basic192Rsa15"
                                },
                                "v": "Basic192Rsa15"
                            },
                            {
                                "l": {
                                    "en-US": "Basic256"
                                },
                                "v": "Basic256"
                            },
                            {
                                "l": {
                                    "en-US": "Basic256Rsa15"
                                },
                                "v": "Basic256Rsa15"
                            },
                            {
                                "l": {
                                    "en-US": "Basic256Sha256"
                                },
                                "v": "Basic256Sha256"
                            }
                        ]
                    }
                }
            },
            {
                "name": "SEC_MODE",
                "type": "str",
                "value": "NONE",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Security Mode"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "None"
                                },
                                "v": "NONE"
                            },
                            {
                                "l": {
                                    "en-US": "Sign"
                                },
                                "v": "SIGN"
                            },
                            {
                                "l": {
                                    "en-US": "Sign&Encrypt"
                                },
                                "v": "SIGNANDENCRYPT"
                            }
                        ]
                    }
                }
            },
            {
                "name": "PUB_INTERVAL",
                "type": "num",
                "value": "1000",
                "ui": {
                    "icon": "font-awesome/fa-upload",
                    "label": {
                        "en-US": "Publish Interval"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "REFRESH_INTERVAL",
                "type": "num",
                "value": "500",
                "ui": {
                    "icon": "font-awesome/fa-refresh",
                    "label": {
                        "en-US": "Refresh Interval"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "NODES",
                "type": "json",
                "value": "[{\"name\":\"Example\",\"nodeId\":\"ns=2;s=example\",\"datatypeName\":\"Double\"},{\"name\":\"Example2\",\"nodeId\":\"ns=2;s=example2\",\"datatypeName\":\"Boolean\"}]",
                "ui": {
                    "icon": "font-awesome/fa-id-badge",
                    "label": {
                        "en-US": "Nodes"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json"
                        ]
                    }
                }
            }
        ],
        "color": "#DDAA99",
        "status": {
            "x": 960,
            "y": 200,
            "wires": [
                {
                    "id": "b31fa9a2.222888",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "a31bcb70.459ee8",
        "type": "status",
        "z": "68d2b36c.055ccc",
        "name": "Listener status",
        "scope": [
            "7bf6018f.bd73f"
        ],
        "x": 220,
        "y": 200,
        "wires": [
            [
                "b31fa9a2.222888"
            ]
        ]
    },
    {
        "id": "699880aa.e42f6",
        "type": "function",
        "z": "68d2b36c.055ccc",
        "name": "Inject OPC UA",
        "func": "var publishInterval = env.get(\"PUB_INTERVAL\") || 1000;\nvar refreshInterval = env.get(\"REFRESH_INTERVAL\") || 1000;\nvar queueSize = Math.ceil(publishInterval/refreshInterval);\nvar items = env.get(\"NODES\") || [];\n\nmsg.topic = \"\";\nmsg.nodetype = \"inject\";\nmsg.injectType = \"listen\";\nmsg.payload = {\n        \"interval\": refreshInterval,\n        \"queueSize\": queueSize,\n        \"options\": {\n            \"requestedPublishingInterval\": publishInterval,\n            \"requestedLifetimeCount\": 60,\n            \"requestedMaxKeepAliveCount\": 10,\n            \"maxNotificationsPerPublish\": 100,\n            \"publishingEnabled\": true,\n            \"priority\": 8\n        }\n};\nmsg.addressSpaceItems = items;\n\nsetTimeout(function(){\n    node.send(msg);\n}, 1000);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 520,
        "wires": [
            [
                "7bf6018f.bd73f"
            ]
        ]
    },
    {
        "id": "f39dd80b.4d8df8",
        "type": "function",
        "z": "68d2b36c.055ccc",
        "name": "Process info",
        "func": "// Check if addressSpaceItems exists\nif (!msg.hasOwnProperty(\"addressSpaceItems\")) {\n    node.warn(\"addressSpaceItems does not exist\");\n    return null;\n}\n\nitems = msg.addressSpaceItems;\n\n// Check addressSpaceItems lenght\nif (items.length != 1) {\n    node.warn(\"addressSpaceItems size is not 1\");\n    return null;\n}\n\nitem = items[0];\nnodeId = item.nodeId;\n\nvar nodeId2name = flow.get('nodeId2name') || false;\nif (nodeId2name === false) {\n    name = nodeId;\n} else {\n    name = nodeId2name[nodeId];\n}\n\n// Check the status of justValue\nif (msg[\"justValue\"] === true) {\n    value = msg.payload.value.value\n} else {\n    value = msg.payload.dataValue.value.value;\n}\n\ndata = {}\ndata[name] = value;\n\nmsg = {}\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "4a230f1a.50735",
        "type": "function",
        "z": "68d2b36c.055ccc",
        "name": "Server data",
        "func": "var host = env.get(\"SERVER_HOST\") || \"localhost\";\nvar port = env.get(\"SERVER_PORT\") || 4840;\nvar secPolicy = env.get(\"SEC_POLICY\") || \"None\";\nvar secMode = env.get(\"SEC_MODE\") || \"NONE\";\n\nvar endpoint = \"opc.tcp://\" + host + \":\" + port;\n\nmsg.payload = {\n    \"discoveryUrl\": null,\n    \"endpoint\": endpoint,\n    \"keepSessionAlive\": true,\n    \"securityPolicy\": secPolicy,\n    \"securityMode\": secMode,\n    \"name\": \"OPC UA Listener Server\",\n    \"showErrors\": true,\n    \"publicCertificateFile\": \"\",\n    \"privateKeyFile\": \"\",\n    \"defaultSecureTokenLifetime\": \"60000\",\n    \"endpointMustExist\": false,\n    \"autoSelectRightEndpoint\": true,\n    \"strategyMaxRetry\": 0,\n    \"strategyInitialDelay\": 0,\n    \"strategyMaxDelay\": 0,\n    \"strategyRandomisationFactor\": 0,\n    \"requestedSessionTimeout\": 0,\n    \"connectionStartDelay\": 0,\n    \"reconnectDelay\": 100\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 120,
        "wires": [
            [
                "38e8b090.38163",
                "b31fa9a2.222888"
            ]
        ]
    },
    {
        "id": "38e8b090.38163",
        "type": "OPCUA-IIoT-Flex-Connector",
        "z": "68d2b36c.055ccc",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "connector": "1a163f76.fe9821",
        "x": 700,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "84825bed.0f37c8",
        "type": "inject",
        "z": "68d2b36c.055ccc",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 230,
        "y": 120,
        "wires": [
            [
                "4a230f1a.50735",
                "d1c12cc6.b7683"
            ]
        ]
    },
    {
        "id": "7bf6018f.bd73f",
        "type": "OPCUA-IIoT-Listener",
        "z": "68d2b36c.055ccc",
        "connector": "1a163f76.fe9821",
        "action": "subscribe",
        "queueSize": "1",
        "name": "",
        "topic": "",
        "justValue": true,
        "useGroupItems": false,
        "showStatusActivities": false,
        "showErrors": false,
        "x": 700,
        "y": 520,
        "wires": [
            [
                "f39dd80b.4d8df8"
            ]
        ]
    },
    {
        "id": "18033dcf.d62cd2",
        "type": "status",
        "z": "68d2b36c.055ccc",
        "name": "Connection Status",
        "scope": [
            "38e8b090.38163"
        ],
        "x": 210,
        "y": 280,
        "wires": [
            [
                "b31fa9a2.222888",
                "dfa34138.f2ba2"
            ]
        ]
    },
    {
        "id": "b31fa9a2.222888",
        "type": "function",
        "z": "68d2b36c.055ccc",
        "name": "Connection status checker",
        "func": "var timer = context.get(\"timer\") || null;\nconst connectionTimeoutMessage = 5000;\n\nif (!msg.hasOwnProperty(\"status\")) {\n    // Inicialization message, timer must be started\n    msg = {};\n    tTimer = setTimeout(function() {\n                node.error(\"Connection to OPC UA Server cannot be stablished, check the configuration parameters\");\n                timer = null;\n                msg.status = {fill:\"red\",shape:\"dot\",text:\"Error (see debug message)\"};\n                node.send(msg);\n            }, connectionTimeoutMessage);\n    context.set(\"timer\", tTimer);\n    msg.status = {fill:\"yellow\",shape:\"dot\",text:\"Connecting...\"};\n    return msg;\n} else {\n    state = msg.status.text;\n    if (state == \"active\") {\n        // Connection done, stop the timer\n        node.debug(\"Connection to server stablished\");\n        if (timer !== null) {\n            clearTimeout(timer);\n            timer = null;\n            context.set(\"timer\", timer);\n        }\n        return msg;\n    } else if (state.includes(\"listening\")) {\n        node.debug(\"Server is listening\");\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 740,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "4f9107d.87dcef8",
        "type": "function",
        "z": "68d2b36c.055ccc",
        "name": "Process write info",
        "func": "var items = env.get(\"NODES\") || [];\n\npayload = msg.payload;\naddressSpaceItems = []\nvaluesToWrite = []\n\nObject.keys(payload).forEach(function(key) {\n    uaNode = items.filter(node => node.name === key);\n    if (uaNode.length == 1) {\n        addressSpaceItems.push(uaNode[0]);\n        valuesToWrite.push(payload[key]);\n    } else {\n        node.error(\"NodeID not found for: \" + key);\n    }\n})\n\nmsg.topic = \"\"\nmsg.payload = \"\"\nmsg.nodetype = \"inject\"\nmsg.injectType = \"write\"\n\nmsg.addressSpaceItems = addressSpaceItems;\nmsg.valuesToWrite = valuesToWrite;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 640,
        "wires": [
            [
                "8584c468.b44018"
            ]
        ]
    },
    {
        "id": "8584c468.b44018",
        "type": "OPCUA-IIoT-Write",
        "z": "68d2b36c.055ccc",
        "connector": "1a163f76.fe9821",
        "name": "",
        "justValue": false,
        "showStatusActivities": false,
        "showErrors": true,
        "x": 710,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "cd1468d6.d65418",
        "type": "OPCUA-IIoT-Read",
        "z": "68d2b36c.055ccc",
        "attributeId": "0",
        "maxAge": 1,
        "depth": 1,
        "connector": "1a163f76.fe9821",
        "name": "",
        "justValue": true,
        "showStatusActivities": true,
        "showErrors": true,
        "parseStrings": false,
        "historyDays": 1,
        "serverMaxItemsToRead": 1000,
        "x": 710,
        "y": 400,
        "wires": [
            [
                "4c2edad.59d1824"
            ]
        ]
    },
    {
        "id": "7cad69a8.0da228",
        "type": "function",
        "z": "68d2b36c.055ccc",
        "name": "Read OPC UA",
        "func": "var items = env.get(\"NODES\") || [];\n\nmsg = {};\n\nmsg.topic = \"\";\nmsg.nodetype = \"inject\";\nmsg.injectType = \"read\";\nmsg.addressSpaceItems = items;\nmsg.payload = \"\"\n\nsetTimeout(function(){\n    node.send(msg);\n}, 1000);\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 400,
        "wires": [
            [
                "cd1468d6.d65418"
            ]
        ]
    },
    {
        "id": "dfa34138.f2ba2",
        "type": "function",
        "z": "68d2b36c.055ccc",
        "name": "Client connected",
        "func": "status = msg.status;\n\nif (status.text == \"active\") {\n    node.debug(\"Client connected to server\");\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 280,
        "wires": [
            [
                "7cad69a8.0da228",
                "699880aa.e42f6"
            ]
        ]
    },
    {
        "id": "4c2edad.59d1824",
        "type": "function",
        "z": "68d2b36c.055ccc",
        "name": "Process read",
        "func": "var nodeId2name = flow.get('nodeId2name') || false;\n\n// Check if 'injecType' exists\nif (!msg.hasOwnProperty(\"injectType\")) {\n    return null;\n}\n\n// Check if it is a 'read' message\nif (msg.injectType != \"read\") {\n    return null;\n}\n\nif (Array.isArray(msg.payload)) {\n    msg.payload.forEach(variable => {\n        nodeId = variable.nodeId;\n        name = nodeId;\n        if (nodeId2name !== false) {\n            name = nodeId2name[nodeId];\n        }\n        value = variable.value;\n        data = {}\n        data[name] = value;\n        msg = {}\n        msg.payload = data;\n        node.send(msg);\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "d1c12cc6.b7683",
        "type": "function",
        "z": "68d2b36c.055ccc",
        "name": "nodeId2name mapper",
        "func": "var items = env.get(\"NODES\") || [];\n\nnodeId2name = {};\n\nitems.forEach(element => {\n    nodeId = element.nodeId;\n    name = element.name;\n    nodeId2name[nodeId] = name;\n});\n\nflow.set(\"nodeId2name\", nodeId2name);\n\nitems = msg.addressSpaceItems;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "1a163f76.fe9821",
        "type": "OPCUA-IIoT-Connector",
        "z": "",
        "discoveryUrl": "",
        "endpoint": "opc.tcp://localhost:55388/",
        "keepSessionAlive": true,
        "loginEnabled": false,
        "securityPolicy": "None",
        "securityMode": "NONE",
        "name": "OPC UA Listener Server",
        "showErrors": false,
        "individualCerts": false,
        "publicCertificateFile": "",
        "privateKeyFile": "",
        "defaultSecureTokenLifetime": "",
        "endpointMustExist": false,
        "autoSelectRightEndpoint": false,
        "strategyMaxRetry": "",
        "strategyInitialDelay": "",
        "strategyMaxDelay": "",
        "strategyRandomisationFactor": "",
        "requestedSessionTimeout": "",
        "connectionStartDelay": "",
        "reconnectDelay": "",
        "maxBadSessionRequests": "10"
    }
]